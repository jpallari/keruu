include:
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/License-Scanning.gitlab-ci.yml
- template: Security/SAST.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml
- template: Container-Scanning.gitlab-ci.yml

image: golang:1.20

stages:
- prepare
- build
- docker-build
- test
- docker-release

workflow:
  rules:
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_COMMIT_BRANCH == "master"

variables:
  GOPATH: $CI_PROJECT_DIR/.go
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE

.go-cache:
  before_script:
  - mkdir -p .go
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
    - .go/pkg/mod/

gomod:
  stage: prepare
  extends: .go-cache
  script:
  - go mod download

build:
  stage: build
  needs:
  - gomod
  extends: .go-cache
  variables:
    CGO_ENABLED: "0"
  script:
  - go build -o keruu
  artifacts:
    paths:
    - keruu
    expire_in: 10 days

.docker-job:
  image: docker:latest
  services:
  - docker:dind
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

.docker-build-job:
  stage: docker-build
  extends: .docker-job
  needs:
  - build
  script:
  - docker build -f $DOCKERFILE --pull -t $CONTAINER_IMAGE .
  - docker push $CONTAINER_IMAGE

build-docker-image-minimal:
  stage: docker-build
  extends: .docker-build-job
  needs:
  - build
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    DOCKERFILE: Dockerfile

build-docker-image-ci:
  stage: docker-build
  extends: .docker-build-job
  needs:
  - build
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-ci"
    DOCKERFILE: Dockerfile.ci

lint:
  stage: test
  needs:
  - gomod
  extends: .go-cache
  image: golangci/golangci-lint:v1.53.3
  script:
  - golangci-lint run -v --skip-dirs '(^|/)\.go($|/)'
  rules:
  - if: $CI_PIPELINE_SOURCE != "schedule"

test:
  stage: test
  needs:
  - gomod
  extends: .go-cache
  before_script:
  - go get github.com/boumenot/gocover-cobertura
  script:
  - >
    go test -race
    -coverprofile=coverage.txt -covermode=atomic
    $(go list ./... | grep '^gitlab.com/lepovirta/keruu')
  - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
  rules:
  - if: $CI_PIPELINE_SOURCE != "schedule"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

.docker-publish-job:
  stage: docker-release
  extends: .docker-job
  script:
  - docker pull $CONTAINER_IMAGE
  - docker tag $CONTAINER_IMAGE $CONTAINER_IMAGE_RELEASE
  - docker push $CONTAINER_IMAGE_RELEASE
  rules:
  - if: $CI_COMMIT_BRANCH == "master"

publish-docker-image-minimal:
  extends: .docker-publish-job
  needs:
  - build-docker-image-minimal
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    CONTAINER_IMAGE_RELEASE: "$CI_REGISTRY_IMAGE:latest"

publish-docker-image-ci:
  extends: .docker-publish-job
  needs:
  - build-docker-image-ci
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-ci"
    CONTAINER_IMAGE_RELEASE: "$CI_REGISTRY_IMAGE:ci"
